include:
  # Include job '.tpl-*' templates.
  - local: ".gitlab/gnu-c++.gitlab-ci.yml"

# Job for creating the make-file using the build.sh script calling CMake with appropriate arguments.
# Also wiping the cmake-build-??? directory.
job-make-gnu:
  extends: [.tpl-bind-gnu,.tpl-cache-gnu]
  stage: make
  needs: [job-check]
  script:
    - !reference [.tpl-log-script,script]
    # Execute the build script to CMake the makefiles.
    - ${SF_DIR_MOUNT_GNU}/build.sh -m .

job-build-gnu:
  extends: [.tpl-bind-gnu,.tpl-cache-gnu,.tpl-artifacts-gnu]
  stage: build
  needs: [job-make-gnu]
  dependencies: [job-make-gnu]
  script:
    - !reference [.tpl-log-script,script]
    # Execute the build script to actually build the running target and libraries.
    - ${SF_DIR_MOUNT_GNU}/build.sh -b . "${SF_RUN_TARGET}"

job-build-test-gnu:
  extends: [.tpl-bind-gnu,.tpl-cache-gnu,.tpl-artifacts-gnu]
  stage: build-test
  needs: [job-make-gnu,job-build-gnu]
  dependencies: [job-make-gnu,job-build-gnu]
  script:
    - !reference [.tpl-log-script,script]
    # Execute the build script to actually build the test target which uses the libraries from the build.
    - ${SF_DIR_MOUNT_GNU}/build.sh -b . "${SF_TEST_TARGET}"

job-test-gnu:
  extends: [.tpl-bind-gnu,.tpl-cache-gnu,.tpl-artifacts-gnu]
  stage: test
  needs: [job-build-test-gnu]
  dependencies: [job-build-test-gnu]
  script:
    - !reference [.tpl-log-script,script]
    # Run the test which in Linux can have absolute path dependencies to dynamic libraries.
    - ${SF_DIR_MOUNT_GNU}/${SF_DIR_BIN_GNU}/${SF_TEST_TARGET}.bin

job-deploy-gnu:
  extends: [.tpl-artifacts-gnu,.tpl-deploy]
  stage: deploy
  needs: [job-build-gnu,job-test-gnu]
  dependencies: [job-build-gnu]
  environment: production
  script:
    - !reference [.tpl-log-script,script]
    - echo "Packaged in a Debian deb-file or maybe a zip-file?"
    - echo "May be rsync-ed to a production site?"

