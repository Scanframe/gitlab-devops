default:
  tags:
    - cplusplus
    - vbox

# Order of stages for jobs to perform in.
stages:
  # Jobs checking the environment requirements.
  - check
  # Jobs producing makefiles using CMake
  - make
  # Jobs for building the actual run target and possible dynamic libraries using.
  - build
  # Jobs for building tests using dynamic libraries of the build.
  - build-test
  # Jobs executing the build (unit-)tests.
  - test
  # Jobs for deploying of stored artifacts.
  - deploy

variables:
  TEST_TARGET: "hello-world-test"
  RUN_TARGET: "hello-world"
  # Fixed directory the source root is mounted to.
  DIR_MOUNT_GNU: "/tmp/build-gnu"

job-check:
  stage: check
  # Do not need the cache for this one.
  cache: []
  script:
    - echo "Working Directory=$(pwd)"
    - echo "CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}"
    - echo "CI_COMMIT_SHA=${CI_COMMIT_SHA}"
    - echo "CI_COMMIT_REF_SLUG=${CI_COMMIT_REF_SLUG}"
    - echo "CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME}"
    - echo "CI_COMMIT_TAG=${CI_COMMIT_TAG}"
    - echo "CI=${CI}"
    - echo "CI_JOB_ID=${CI_JOB_ID}"
    - echo "CI_REPOSITORY_URL=${CI_REPOSITORY_URL}"
    - echo "CI_PROJECT_URL=${CI_PROJECT_URL}"
    - echo "Environment..."
    - env

# Job for creating the make-file using the build.sh script calling CMake with appropriate arguments.
# Also wiping the cmake-build-??? directory.
job-make-gnu:
  stage: make
  needs: [job-check]
  cache:
    key: "${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHORT_SHA}-gnu"
    paths:
      - cmake-build-*/
  script:
    # Bind/Mount the current directory so the path is the same.
    - mkdir -p "${DIR_MOUNT_GNU}" && bindfs ./ "${DIR_MOUNT_GNU}"
    # Execute the build script to CMake the makefiles.
    - ${DIR_MOUNT_GNU}/build.sh -m .
    # Unmount the bind directory.
    - fusermount -u "${DIR_MOUNT_GNU}"

job-build-gnu:
  stage: build
  needs: [job-make-gnu]
  dependencies: [job-make-gnu]
  cache:
    key: "${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHORT_SHA}-gnu"
    paths:
      - cmake-build-*/
  artifacts:
    name: "${CI_COMMIT_REF_NAME}-gnu"
    paths:
      - bin/
  script:
    # Bind/Mount the current directory so the path is the same.
    - mkdir -p "${DIR_MOUNT_GNU}" && bindfs ./ "${DIR_MOUNT_GNU}"
    # Execute the build script to actually build the running target and libraries.
    - ${DIR_MOUNT_GNU}/build.sh -b . "${RUN_TARGET}"
    # Unmount the bind directory.
    - fusermount -u "${DIR_MOUNT_GNU}"

job-build-test-gnu:
  stage: build-test
  needs: [job-make-gnu,job-build-gnu]
  dependencies: [job-make-gnu,job-build-gnu]
  cache:
    key: "${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHORT_SHA}-gnu"
    paths:
      - cmake-build-*/
  artifacts:
    name: "${CI_COMMIT_REF_NAME}-gnu"
    paths:
      - bin/
  script:
    # Bind/Mount the current directory so the path is the same.
    - mkdir -p "${DIR_MOUNT_GNU}" && bindfs ./ "${DIR_MOUNT_GNU}"
    # Execute the build script to actually build the test target which uses the libraries from the build.
    - ${DIR_MOUNT_GNU}/build.sh -b . "${TEST_TARGET}"
    # Unmount the bind directory.
    - fusermount -u "${DIR_MOUNT_GNU}"

job-test-gnu:
  stage: test
  needs: [job-build-test-gnu]
  dependencies: [job-build-test-gnu]
  cache:
    key: "${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHORT_SHA}-gnu"
    paths:
      - cmake-build-*/
  artifacts:
    name: "${CI_COMMIT_REF_NAME}-gnu"
    paths:
      - bin/
  script:
    # Bind/Mount the current directory so the path is the same.
    - mkdir -p "${DIR_MOUNT_GNU}" && bindfs ./ "${DIR_MOUNT_GNU}"
    # Run the test which in Linux can have absolute path dependencies to dynamic libraries.
    - ${DIR_MOUNT_GNU}/bin/${TEST_TARGET}.bin
    # Unmount the bind directory.
    - fusermount -u "${DIR_MOUNT_GNU}"

job-deploy-gnu:
  stage: deploy
  needs: [job-build-gnu]
  dependencies: [job-build-gnu]
  artifacts:
    name: "${CI_COMMIT_REF_NAME}-gnu"
    paths:
      - bin/
  environment: production
  script:
    - echo "Packaged in a Debian deb-file or maybe a zip-file?"
    - echo "May be rsync-ed to a production site?"
