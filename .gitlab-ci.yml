##
## For keywords and structure look at https://docs.gitlab.com/ee/ci/yaml/
##
default:
  tags:
    - cplusplus
    - vbox

# Order of stages for jobs to perform in.
stages:
  - report
  - make
  - build-test
  - test
  - build
  - deploy

variables:
  TEST_TARGET: "hello-world-test"
  RUN_TARGET: "hello-world"

job-report:
  stage: report
  # Do not need the cache for this one.
  cache: []
  script:
    - echo "CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}"
    - echo "CI_COMMIT_SHA=${CI_COMMIT_SHA}"
    - echo "CI_COMMIT_REF_SLUG=${CI_COMMIT_REF_SLUG}"
    - echo "CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME}"
    - echo "CI_COMMIT_TAG=${CI_COMMIT_TAG}"
    - echo "CI=${CI}"
    - echo "CI_JOB_ID=${CI_JOB_ID}"
    - echo "CI_REPOSITORY_URL=${CI_REPOSITORY_URL}"
    - echo "CI_PROJECT_URL=${CI_PROJECT_URL}"

################################ Linux GNU Compiler ###########################

# Job for creating the make-file using the build.sh script calling CMake with appropriate arguments.
# Also wiping the cmake-build-??? directory.
job-make-gnu:
  stage: make
  needs: [ job-report ]
  cache:
    key: "${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHORT_SHA}-gnu"
    paths:
      - cmake-build-*/
  script:
    - ./build.sh -m .

# Job for test builds using the build.sh script calling CMake with appropriate arguments.
job-build-test-gnu:
  stage: build-test
  needs: [ job-make-gnu ]
  cache:
    key: "${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHORT_SHA}-gnu"
    paths:
      - cmake-build-*/
  artifacts:
    name: "${CI_JOB_NAME}"
    paths:
      - bin/
  script:
    - ./build.sh -b . "${TEST_TARGET}"

job-test-gnu:
  stage: test
  needs: [ job-build-test-gnu ]
  cache:
    key: "${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHORT_SHA}-gnu"
    paths:
      - cmake-build-*/
  artifacts:
    name: "${CI_JOB_NAME}"
    paths:
      - bin/
  script:
    - "./bin/${TEST_TARGET}.bin"

# Jobs for building the actual run target using the build.sh script calling CMake with appropriate arguments.
job-build-gnu:
  stage: build
  needs: [ job-make-gnu ]
  cache:
    key: "${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHORT_SHA}-gnu"
    paths:
      - cmake-build-*/
  artifacts:
    name: "${CI_JOB_NAME}"
    paths:
      - bin/
  script:
    - ./build.sh -b . "${RUN_TARGET}"

################################ Linux GW Compiler ############################

# Job for creating the make-file using the build.sh script calling CMake with appropriate arguments.
job-make-gw:
  stage: make
  needs: [ job-report ]
  cache:
    key: "${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHORT_SHA}-gw"
    paths:
      - cmake-build-*/
  script:
    - ./build.sh -wm .

# Job for test builds using the build.sh script calling CMake with appropriate arguments.
job-build-test-gw:
  stage: build-test
  needs: [ job-make-gw ]
  cache:
    key: "${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHORT_SHA}-gw"
    paths:
      - cmake-build-*/
  artifacts:
    name: "${CI_JOB_NAME}"
    paths:
      - binwin/
  script:
    - ./build.sh -wb . "${TEST_TARGET}"

job-test-gw:
  stage: test
  needs: [ job-build-test-gw ]
  cache:
    key: "${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHORT_SHA}-gw"
    paths:
      - cmake-build-*/
  artifacts:
    name: "${CI_JOB_NAME}"
    paths:
      - binwin/
  script:
    - ./wine-exec.sh "${TEST_TARGET}.exe"

# Job for building using the build.sh script calling CMake with appropriate arguments.
job-build-gw:
  stage: build
  needs: [ job-make-gw ]
  cache:
    key: "${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHORT_SHA}-gw"
    paths:
      - cmake-build-*/
  artifacts:
    name: "${CI_JOB_NAME}"
    paths:
      - binwin/
  script:
    - ./build.sh -wb . "${RUN_TARGET}"

###############################################################################

job-deploy:
  stage: deploy
  needs: [job-build-gnu,job-build-gw]
  # Do not need the cache for this one.
  cache: []
  artifacts:
    name: "${CI_JOB_NAME}"
    paths:
      - bin/
      - binwin/
  environment: production
  script:
    - echo "Packaged in a Debian deb-file or maybe a zip-file?"
    - echo "May be rsync-ed to a production site?"

#    - ls -la cmake-build-*-*/bin
#    - echo ssh -o StrictHostKeyChecking=no -i ~/.ssh/public-key-file root@my-deplay-server
#    - echo ssh -o StrictHostKeyChecking=no -i $SSH_KEY_FILE root@my-deplay-server "
#      git -C /home/sites/app/
#      "
